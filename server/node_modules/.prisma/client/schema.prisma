datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(READER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments   Comment[]
  favorites  Favorite[]
  teamMember TeamMember[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  members     TeamMember[]
  invitations Invitation[]
}

model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(EDITOR)

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  news News[]

  @@unique([userId, teamId])
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  teamId    String
  status    Invitationstatus @default(PENDING)
  createdAt DateTime         @default(now())

  team Team @relation(fields: [teamId], references: [id])
}

model News {
  id          String  @id @default(cuid())
  image       String?
  title       String
  slug        String  @unique
  description String  @db.Text
  content     String  @db.Text
  views       Int     @default(0)
  likes       Int     @default(0)
  country     String
  category    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  teamMemberId String

  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])
  comments   Comment[]
  favorites  Favorite[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  newsId    String

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])

  @@unique([userId, newsId])
}

enum Role {
  READER
  CREATOR
  ADMIN
}

enum TeamRole {
  EDITOR
  OWNER
}

enum Invitationstatus {
  PENDING
  ACCEPTED
  REJECTED
}
